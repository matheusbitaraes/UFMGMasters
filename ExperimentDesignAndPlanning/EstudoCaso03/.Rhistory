}
if (!require(multcomp, quietly = TRUE)){
suppressMessages(install.packages("multcomp"))
}
if (!require(lmtest, quietly = TRUE)){
suppressMessages(install.packages("lmtest"))
}
if (!require(effectsize, quietly = TRUE)){
suppressMessages(install.packages("effectsize"))
}
if (!require(CAISEr, quietly = TRUE)){
suppressMessages(install.packages("CAISEr"))
}
library(stats)
library(ggplot2)
library(plotly)
library(reshape2)
library(GGally)
library(tidyr)
library(pracma)
library(lsr)
library(car)
library(pwr)
library(multcompView)
library(multcomp)
library(lmtest)
library(effectsize)
library(CAISEr)
options(Encoding="UTF-8")
## Configuração 1
recpars1 <- list(name = "recombination_blxAlphaBeta", alpha = 0, beta = 0)
mutpars1 <- list(name = "mutation_rand", f = 4)
## Configuração 2
recpars2 <- list(name = "recombination_linear")
mutpars2 <- list(name = "mutation_rand", f = 1.5)
# dados do trabalho
alpha <- 0.05
delta <- 0.5
beta <- 0.2
out <- calc_instances(ncomparisons = 1,
d = delta,
power = 1 - beta,
sig.level = alpha,
alternative.side = "two.sided",
power.target = "mean")
cat('Número de instâncias necessárias:', out$ninstances)
num_dims <- 34
dims = round(linspace(2, 150, num_dims), digits = 0)
print(dims)
suppressPackageStartupMessages(library(ExpDE))
suppressPackageStartupMessages(library(smoof))
file_name = "pilot_execution_backup.csv"
num_exec <- 10
if (file.exists(file_name)) {
# se ja existir uma arquivo com o dados da execução, não é necessário executar novamente. Apenas será feita a leitura do arquivo
print("Arquivo de backup encontrado. Recuperando dados ao inves de realizar uma nova execução")
initial_data <- read.csv(file=file_name, header = TRUE, sep=",")
dims <- initial_data$dim
mean_y1 <- initial_data$mean.instance1
mean_y2 <- initial_data$mean.instance2
sd_y1 <- initial_data$sd.instance1
sd_y2 <- initial_data$sd.instance2
} else {
# Função para execução de n funções de rosenbrock para determinada dimensao
executeRosenbrock <- function(dim, num_exec) {
# Função de ronsebrock para determinada dimensao
fn <<- function(X) {
if(!is.matrix(X)) X <- matrix(X, nrow = 1) # <- if a single vector is passed as X
Y <- apply(X, MARGIN = 1,
FUN = smoof::makeRosenbrockFunction(dimensions = dim))
return(Y)
}
# definições dadas no enunciado
selpars <- list(name = "selection_standard")
stopcrit <- list(names = "stop_maxeval", maxevals = 5000*dim, maxiter = 100*dim)
probpars <- list(name = "fn", xmin = rep(-5, dim), xmax = rep(10, dim))
popsize <- 5*dim
y1 <- vector(,num_exec)
y2 <- vector(,num_exec)
for (i in 1:num_exec){
# rodando problema para instancia 1
out <-  ExpDE(mutpars = mutpars1,
recpars = recpars1,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y1[i] <- out$Fbest
# rodando problema para instancia 2
out <-  ExpDE(mutpars = mutpars2,
recpars = recpars2,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y2[i] <- out$Fbest
cat("\n y1", y1[i])
cat("\n y2", y2[i])
}
return(
data.frame(
mean1 = mean(y1),
mean2 = mean(y2),
sd1 = sd(y1),
sd2 = sd(y2)))
}
# Função para execução de n funções de rosenbrock para uma lista de dimensões
executeRosenbrockForDims <- function(dims, num_exec){
num_dims <- length(dims)
mean_y1 <- vector(,num_dims)
mean_y2 <- vector(,num_dims)
sd_y1 <- vector(,num_dims)
sd_y2 <- vector(,num_dims)
for (d in 1:num_dims){
dim <- dims[d]
# multiplas execuções
Y = executeRosenbrock(dim, num_exec)
cat("dim:",dim, " \n")
cat("mu1:",Y$mean1, " \n")
cat("sd1:",Y$sd1, " \n")
cat("mu2:",Y$mean2, " \n")
cat("sd2:",Y$sd2, " \n")
mean_y1[d] <- Y$mean1
mean_y2[d] <- Y$mean2
sd_y1[d] <- Y$sd1
sd_y2[d] <- Y$sd2
}
data <- data.frame(
dim = dims,
mean.instance1 = mean_y1,
mean.instance2 = mean_y2,
sd.instance1 = sd_y1,
sd.instance2 = sd_y2)
return(data)
}
# execução das funções de rosenbrock
initial_data = executeRosenbrockForDims(dims, num_exec)
# escreve no arquivo de backup os resultados coletados
write.csv(initial_data, file = file_name)
}
initial_data$n1 <- rep(num_exec, num_dims)
initial_data$n2 <- rep(num_exec, num_dims)
file_name = "execution_backup.csv"
num_exec <- 10
if (file.exists(file_name)) {
# se ja existir uma arquivo com o dados da execução, não é necessário executar novamente. Apenas será feita a leitura do arquivo
print("Arquivo de backup encontrado. Recuperando dados ao inves de realizar uma nova execução")
data <- read.csv(file=file_name, header = TRUE, sep=",")
} else {
data <- initial_data
se_opt <- 0.05 # se pretendido
n_max <- 50 # máximo número de execuções
# loop de dimensões
for (d in 1:num_dims) {
dim <- data$dim[d]
mu1 <- data$mean.instance1[d]
mu2 <- data$mean.instance2[d]
sd1 <- data$sd.instance1[d]
sd2 <- data$sd.instance2[d]
n1 <- 10 # número de execuções que já foram realizadas
n2 <- 10
# Função de ronsebrock para determinada dimensao
fn <- function(X) {
if(!is.matrix(X)) X <- matrix(X, nrow = 1) # <- if a single vector is passed as X
Y <- apply(X, MARGIN = 1,
FUN = smoof::makeRosenbrockFunction(dimensions = dim))
return(Y)
}
# definições dadas no enunciado
selpars <- list(name = "selection_standard")
stopcrit <- list(names = "stop_maxeval", maxevals = 5000*dim, maxiter = 100*dim)
probpars <- list(name = "fn", xmin = rep(-5, dim), xmax = rep(10, dim))
popsize <- 5*dim
# calculo do se
se <- sqrt(sd1^2/n1 + sd2^2/n2)
cat("\n se inicial:", se)
# loop de execuções
while (se > se_opt && n1 + n2 < n_max){
ropt <- sd1/sd2
if (n1/n2 < ropt){
# executa algoritmo 1
out <- ExpDE(mutpars = mutpars1,
recpars = recpars1,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y1 <- out$Fbest
# atualiza parâmetros
mu_ <- (mu1*n1 + y1)/(n1+1)
sd_ <- sqrt(((n1-1)*sd1^2 + (y1 - mu_)*(y1 - mu1))/n1)
mu1 <- mu_
sd1 <- sd_
n1 <- n1 + 1
} else {
# executa algoritmo 2
out <- ExpDE(mutpars = mutpars2,
recpars = recpars2,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y2 <- out$Fbest
# atualiza parâmetros
mu_ <- (mu2*n2 + y2)/(n2+1)
sd_ <- sqrt(((n2-1)*sd2^2 + (y2 - mu_)*(y2 - mu2))/n2)
mu2 <- mu_
sd2 <- sd_
n2 <- n2 + 1
}
# atualiza se
se <- sqrt(sd1^2/n1 + sd2^2/n2)
cat("se:", se, " \n")
cat("dim:",dim, " \n")
cat("se:",se, " \n")
cat("mu1:",mu1, " \n")
cat("sd1:",sd1, " \n")
cat("mu2:",mu2, " \n")
cat("sd2:",sd2, " \n")
cat("n1:",n1, " \n")
cat("n2:",n2, " \n")
}
data$mean.instance1[d] <- mu1
data$sd.instance1[d] <- sd1
data$n1[d] <- n1
data$mean.instance2[d] <- mu2
data$sd.instance2[d] <- sd2
data$n2[d] <- n2
}
# escreve dados no arquivo de backup
write.csv(data, file = file_name)
}
data
if (!require(ggplot2, quietly = TRUE)){
install.packages("ggplot2")
}
if (!require(devtools, quietly = TRUE)){
install.packages("devtools")
}
if (!require(GGally, quietly = TRUE)){
install.packages("GGally")
}
if (!require(broom, quietly = TRUE)){
devtools::install_github("dgrtwo/broom")
}
if (!require(stats, quietly = TRUE)){
suppressMessages(install.packages("stats"))
}
if (!require(plotly, quietly = TRUE)){
suppressMessages(install.packages("plotly"))
}
if (!require(reshape2, quietly = TRUE)){
suppressMessages(install.packages("reshape2"))
}
if (!require(tidyr, quietly = TRUE)){
suppressMessages(install.packages("tidyr"))
}
if (!require(pracma, quietly = TRUE)){
suppressMessages(install.packages("pracma"))
}
if (!require(lsr, quietly = TRUE)){
suppressMessages(install.packages("lsr"))
}
if (!require(car, quietly = TRUE)){
suppressMessages(install.packages("car"))
}
if (!require(pwr, quietly = TRUE)){
suppressMessages(install.packages("pwr"))
}
if (!require(multcompView, quietly = TRUE)){
suppressMessages(install.packages("multcompView"))
}
if (!require(multcomp, quietly = TRUE)){
suppressMessages(install.packages("multcomp"))
}
if (!require(lmtest, quietly = TRUE)){
suppressMessages(install.packages("lmtest"))
}
if (!require(effectsize, quietly = TRUE)){
suppressMessages(install.packages("effectsize"))
}
if (!require(CAISEr, quietly = TRUE)){
suppressMessages(install.packages("CAISEr"))
}
library(stats)
library(ggplot2)
library(plotly)
library(reshape2)
library(GGally)
library(tidyr)
library(pracma)
library(lsr)
library(car)
library(pwr)
library(multcompView)
library(multcomp)
library(lmtest)
library(effectsize)
library(CAISEr)
options(Encoding="UTF-8")
## Configuração 1
recpars1 <- list(name = "recombination_blxAlphaBeta", alpha = 0, beta = 0)
mutpars1 <- list(name = "mutation_rand", f = 4)
## Configuração 2
recpars2 <- list(name = "recombination_linear")
mutpars2 <- list(name = "mutation_rand", f = 1.5)
# dados do trabalho
alpha <- 0.05
delta <- 0.5
beta <- 0.2
out <- calc_instances(ncomparisons = 1,
d = delta,
power = 1 - beta,
sig.level = alpha,
alternative.side = "two.sided",
power.target = "mean")
cat('Número de instâncias necessárias:', out$ninstances)
num_dims <- 34
dims = round(linspace(2, 150, num_dims), digits = 0)
print(dims)
suppressPackageStartupMessages(library(ExpDE))
suppressPackageStartupMessages(library(smoof))
file_name = "pilot_execution_backup.csv"
num_exec <- 10
if (file.exists(file_name)) {
# se ja existir uma arquivo com o dados da execução, não é necessário executar novamente. Apenas será feita a leitura do arquivo
print("Arquivo de backup encontrado. Recuperando dados ao inves de realizar uma nova execução")
initial_data <- read.csv(file=file_name, header = TRUE, sep=",")
dims <- initial_data$dim
mean_y1 <- initial_data$mean.instance1
mean_y2 <- initial_data$mean.instance2
sd_y1 <- initial_data$sd.instance1
sd_y2 <- initial_data$sd.instance2
} else {
# Função para execução de n funções de rosenbrock para determinada dimensao
executeRosenbrock <- function(dim, num_exec) {
# Função de ronsebrock para determinada dimensao
fn <<- function(X) {
if(!is.matrix(X)) X <- matrix(X, nrow = 1) # <- if a single vector is passed as X
Y <- apply(X, MARGIN = 1,
FUN = smoof::makeRosenbrockFunction(dimensions = dim))
return(Y)
}
# definições dadas no enunciado
selpars <- list(name = "selection_standard")
stopcrit <- list(names = "stop_maxeval", maxevals = 5000*dim, maxiter = 100*dim)
probpars <- list(name = "fn", xmin = rep(-5, dim), xmax = rep(10, dim))
popsize <- 5*dim
y1 <- vector(,num_exec)
y2 <- vector(,num_exec)
for (i in 1:num_exec){
# rodando problema para instancia 1
out <-  ExpDE(mutpars = mutpars1,
recpars = recpars1,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y1[i] <- out$Fbest
# rodando problema para instancia 2
out <-  ExpDE(mutpars = mutpars2,
recpars = recpars2,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y2[i] <- out$Fbest
cat("\n y1", y1[i])
cat("\n y2", y2[i])
}
return(
data.frame(
mean1 = mean(y1),
mean2 = mean(y2),
sd1 = sd(y1),
sd2 = sd(y2)))
}
# Função para execução de n funções de rosenbrock para uma lista de dimensões
executeRosenbrockForDims <- function(dims, num_exec){
num_dims <- length(dims)
mean_y1 <- vector(,num_dims)
mean_y2 <- vector(,num_dims)
sd_y1 <- vector(,num_dims)
sd_y2 <- vector(,num_dims)
for (d in 1:num_dims){
dim <- dims[d]
# multiplas execuções
Y = executeRosenbrock(dim, num_exec)
cat("dim:",dim, " \n")
cat("mu1:",Y$mean1, " \n")
cat("sd1:",Y$sd1, " \n")
cat("mu2:",Y$mean2, " \n")
cat("sd2:",Y$sd2, " \n")
mean_y1[d] <- Y$mean1
mean_y2[d] <- Y$mean2
sd_y1[d] <- Y$sd1
sd_y2[d] <- Y$sd2
}
data <- data.frame(
dim = dims,
mean.instance1 = mean_y1,
mean.instance2 = mean_y2,
sd.instance1 = sd_y1,
sd.instance2 = sd_y2)
return(data)
}
# execução das funções de rosenbrock
initial_data = executeRosenbrockForDims(dims, num_exec)
# escreve no arquivo de backup os resultados coletados
write.csv(initial_data, file = file_name)
}
initial_data$n1 <- rep(num_exec, num_dims)
initial_data$n2 <- rep(num_exec, num_dims)
file_name = "execution_backup.csv"
num_exec <- 10
if (file.exists(file_name)) {
# se ja existir uma arquivo com o dados da execução, não é necessário executar novamente. Apenas será feita a leitura do arquivo
print("Arquivo de backup encontrado. Recuperando dados ao inves de realizar uma nova execução")
data <- read.csv(file=file_name, header = TRUE, sep=",")
} else {
data <- initial_data
se_opt <- 0.05 # se pretendido
n_max <- 50 # máximo número de execuções
# loop de dimensões
for (d in 1:num_dims) {
dim <- data$dim[d]
mu1 <- data$mean.instance1[d]
mu2 <- data$mean.instance2[d]
sd1 <- data$sd.instance1[d]
sd2 <- data$sd.instance2[d]
n1 <- 10 # número de execuções que já foram realizadas
n2 <- 10
# Função de ronsebrock para determinada dimensao
fn <- function(X) {
if(!is.matrix(X)) X <- matrix(X, nrow = 1) # <- if a single vector is passed as X
Y <- apply(X, MARGIN = 1,
FUN = smoof::makeRosenbrockFunction(dimensions = dim))
return(Y)
}
# definições dadas no enunciado
selpars <- list(name = "selection_standard")
stopcrit <- list(names = "stop_maxeval", maxevals = 5000*dim, maxiter = 100*dim)
probpars <- list(name = "fn", xmin = rep(-5, dim), xmax = rep(10, dim))
popsize <- 5*dim
# calculo do se
se <- sqrt(sd1^2/n1 + sd2^2/n2)
cat("\n se inicial:", se)
# loop de execuções
while (se > se_opt && n1 + n2 < n_max){
ropt <- sd1/sd2
if (n1/n2 < ropt){
# executa algoritmo 1
out <- ExpDE(mutpars = mutpars1,
recpars = recpars1,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y1 <- out$Fbest
# atualiza parâmetros
mu_ <- (mu1*n1 + y1)/(n1+1)
sd_ <- sqrt(((n1-1)*sd1^2 + (y1 - mu_)*(y1 - mu1))/n1)
mu1 <- mu_
sd1 <- sd_
n1 <- n1 + 1
} else {
# executa algoritmo 2
out <- ExpDE(mutpars = mutpars2,
recpars = recpars2,
popsize = popsize,
selpars = selpars,
stopcrit = stopcrit,
probpars = probpars,
showpars = list(show.iters = "dots", showevery = 20))
y2 <- out$Fbest
# atualiza parâmetros
mu_ <- (mu2*n2 + y2)/(n2+1)
sd_ <- sqrt(((n2-1)*sd2^2 + (y2 - mu_)*(y2 - mu2))/n2)
mu2 <- mu_
sd2 <- sd_
n2 <- n2 + 1
}
# atualiza se
se <- sqrt(sd1^2/n1 + sd2^2/n2)
cat("se:", se, " \n")
cat("dim:",dim, " \n")
cat("se:",se, " \n")
cat("mu1:",mu1, " \n")
cat("sd1:",sd1, " \n")
cat("mu2:",mu2, " \n")
cat("sd2:",sd2, " \n")
cat("n1:",n1, " \n")
cat("n2:",n2, " \n")
}
data$mean.instance1[d] <- mu1
data$sd.instance1[d] <- sd1
data$n1[d] <- n1
data$mean.instance2[d] <- mu2
data$sd.instance2[d] <- sd2
data$n2[d] <- n2
}
# escreve dados no arquivo de backup
write.csv(data, file = file_name)
}
data
